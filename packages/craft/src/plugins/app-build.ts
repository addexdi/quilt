import {createProjectPlugin} from '@quilted/sewing-kit';
import type {App} from '@quilted/sewing-kit';

import {getEntry} from './shared';

declare module '@quilted/sewing-kit' {
  interface BuildAppOptions {
    /**
     * Indicates that the base build is being generated by `quilt`.
     */
    quilt: boolean;
  }
}

export function appBuild() {
  return createProjectPlugin<App>({
    name: 'Quilt.App.Build',
    build({project, workspace, configure, run}) {
      configure(({outputDirectory, rollupInput, rollupOutputs}, options) => {
        if (!options.quilt) return;

        rollupInput?.(async (inputs) => {
          if (inputs.length > 0) return inputs;

          const entry = await getEntry(project);
          return [entry];
        });

        rollupOutputs?.(async (outputs) => [
          ...outputs,
          {
            format: 'system',
            entryFileNames: `[name].[hash].js`,
            assetFileNames: `[name].[hash].[ext]`,
            chunkFileNames: `[name].[hash].js`,
            dir: await outputDirectory.run(
              workspace.fs.buildPath(
                workspace.apps.length > 1 ? `apps/${project.name}` : 'app',
                'assets',
              ),
            ),
          },
        ]);
      });

      run((step, {configuration}) =>
        step({
          name: 'Quilt.App.Build',
          label: `Build app ${project.name}`,
          async run() {
            const [configure, {buildWithRollup}] = await Promise.all([
              configuration({quilt: true, quiltBrowserEntry: true}),
              import('@quilted/sewing-kit-rollup'),
            ]);

            await buildWithRollup(configure);
          },
        }),
      );
    },
  });
}
