import {rm} from 'fs/promises';

import {createProjectPlugin} from '@quilted/sewing-kit';
import type {Service, WaterfallHook} from '@quilted/sewing-kit';
import type {ModuleFormat} from 'rollup';

import {getEntry} from './shared';

export interface ServiceBuildHooks {
  /**
   * The module format that will be used for the application server. By
   * default, this is set to `module`, which generates native ES module
   * outputs.
   */
  quiltServiceOutputFormat: WaterfallHook<ModuleFormat>;
}

declare module '@quilted/sewing-kit' {
  interface BuildServiceOptions {
    /**
     * Indicates that the base build is being generated by `quilt`.
     */
    quiltService: boolean;
  }

  interface BuildServiceConfigurationHooks extends ServiceBuildHooks {}
}

export interface Options {
  minify: boolean;
  httpHandler: boolean;
}

export function serviceBuild({minify, httpHandler}: Options) {
  return createProjectPlugin<Service>({
    name: 'Quilt.Service.Build',
    build({project, hooks, configure, run}) {
      hooks<ServiceBuildHooks>(({waterfall}) => ({
        quiltServiceOutputFormat: waterfall(),
      }));

      configure(
        (
          {
            outputDirectory,
            rollupInput,
            rollupPlugins,
            rollupOutputs,
            quiltServiceOutputFormat,
          },
          {quiltService = false},
        ) => {
          if (!quiltService) return;

          rollupInput?.(async () => {
            const entry = await getEntry(project);
            return [entry];
          });

          if (minify) {
            rollupPlugins?.(async (plugins) => {
              const {terser} = await import('rollup-plugin-terser');

              plugins.push(terser());

              return plugins;
            });
          }

          rollupOutputs?.(async (outputs) => {
            const [format, directory] = await Promise.all([
              quiltServiceOutputFormat!.run('module'),
              outputDirectory.run(project.fs.buildPath('runtime')),
            ]);

            outputs.push({
              format,
              entryFileNames: 'index.js',
              dir: directory,
            });

            return outputs;
          });
        },
      );

      run((step, {configuration}) =>
        step({
          name: 'Quilt.Service.Build',
          label: `Build service ${project.name}`,
          async run() {
            const [configure, {buildWithRollup}] = await Promise.all([
              configuration({
                quiltService: true,
                quiltHttpHandler: httpHandler,
              }),
              import('@quilted/sewing-kit-rollup'),
            ]);

            await rm(project.fs.buildPath('runtime'), {
              recursive: true,
              force: true,
            });

            await buildWithRollup(configure);
          },
        }),
      );
    },
  });
}
