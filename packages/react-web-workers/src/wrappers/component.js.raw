import {createElement, Component} from 'react';
import {render, createRemoteRoot} from '@remote-ui/react';
import {expose, retain, release} from '@remote-ui/web-workers/worker';

import WorkerComponent from {{WORKER_MODULE}};

class Runner extends Component {
  constructor(props) {
    super(props);
    this.state = Object.assign({}, props);
  }

  updateProps(update, callback) {
    this.setState(update, callback);
  }

  render() {
    return createElement(WorkerComponent, this.state);
  }
}

function mount(props, channel, options) {
  let runner;

  retain(props);
  retain(channel);

  const root = createRemoteRoot(channel, options);

  render(
    createElement(Runner, Object.assign({
      ref: (createdRunner) => {
        runner = createdRunner;
      }
    }, props)),
    root
  );

  return (update) => {
    retain(update);

    const updatedValues = Object.keys(update).map((key) => runner.props[key]);
    runner.updateProps(update, () => {
      updateValues.forEach((value) => {
        release(value);
      });
    });
  };
}

expose({mount});
